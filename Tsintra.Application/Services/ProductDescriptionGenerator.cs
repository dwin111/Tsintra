using System;
using System.Text;
using System.Linq;
using Tsintra.Domain.Interfaces;
using Tsintra.Domain.Models;
using Microsoft.Extensions.Configuration;
using System.Net.Http;
using System.Threading.Tasks;
using System.Text.Json;

namespace Tsintra.Application.Services
{
    public class ProductDescriptionGenerator : IProductDescriptionGenerator
    {
        private readonly IConfiguration _configuration;
        private readonly HttpClient _httpClient;
        private readonly string _aiEndpoint;
        private readonly string _aiApiKey;

        public ProductDescriptionGenerator(IConfiguration configuration, HttpClient httpClient)
        {
            _configuration = configuration;
            _httpClient = httpClient;
            _aiEndpoint = _configuration["AI:Endpoint"] ?? throw new ArgumentNullException("AI:Endpoint is not configured");
            _aiApiKey = _configuration["AI:ApiKey"] ?? throw new ArgumentNullException("AI:ApiKey is not configured");
        }

        public string GenerateInstagramDescription(Product product)
        {
            var description = new StringBuilder();

            // Add product name with decorative emojis
            description.AppendLine($"‚ú® {product.Name} ‚ú®");
            description.AppendLine();

            // Add price information
            if (product.OldPrice.HasValue && product.OldPrice > product.Price)
            {
                description.AppendLine($"üí∞ –¶—ñ–Ω–∞: {product.Price:N0} ‚ÇΩ (–±—É–ª–æ {product.OldPrice.Value:N0} ‚ÇΩ)");
            }
            else
            {
                description.AppendLine($"üí∞ –¶—ñ–Ω–∞: {product.Price:N0} ‚ÇΩ");
            }
            description.AppendLine();

            // Add stock information
            if (product.QuantityInStock.HasValue)
            {
                description.AppendLine($"üì¶ –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ: {product.QuantityInStock} —à—Ç.");
            }
            description.AppendLine();

            // Add product description if available
            if (!string.IsNullOrWhiteSpace(product.Description))
            {
                description.AppendLine("üìù –û–ø–∏—Å:");
                description.AppendLine(product.Description);
                description.AppendLine();
            }

            // Add product properties
            if (product.Properties != null && product.Properties.Any())
            {
                description.AppendLine("üîç –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:");
                foreach (var property in product.Properties)
                {
                    description.AppendLine($"‚Ä¢ {property.Name}: {property.Value}");
                }
                description.AppendLine();
            }

            // Add hashtags from keywords
            if (!string.IsNullOrWhiteSpace(product.Keywords))
            {
                var hashtags = product.Keywords
                    .Split(',', StringSplitOptions.RemoveEmptyEntries)
                    .Select(k => k.Trim())
                    .Where(k => !string.IsNullOrWhiteSpace(k))
                    .Select(k => $"#{k.Replace(" ", "_")}");
                
                description.AppendLine(string.Join(" ", hashtags));
            }

            return description.ToString();
        }

        public async Task<string> GenerateAIDescriptionAsync(Product product, string? userPreferences = null)
        {
            var prompt = new StringBuilder();
            prompt.AppendLine("–°—Ç–≤–æ—Ä–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏–π –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É –¥–ª—è Instagram –º–∞–≥–∞–∑–∏–Ω—É. –û–ø–∏—à–∏ —Ç–æ–≤–∞—Ä –ø—Ä–∏–≤–∞–±–ª–∏–≤–æ —Ç–∞ –µ–º–æ—Ü—ñ–π–Ω–æ.");
            prompt.AppendLine($"–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É: {product.Name}");
            prompt.AppendLine($"–¶—ñ–Ω–∞: {product.Price:N0} ‚ÇΩ");
            if (product.OldPrice.HasValue)
            {
                prompt.AppendLine($"–°—Ç–∞—Ä–∞ —Ü—ñ–Ω–∞: {product.OldPrice.Value:N0} ‚ÇΩ");
            }
            prompt.AppendLine($"–û–ø–∏—Å: {product.Description}");
            
            if (product.Properties != null)
            {
                prompt.AppendLine("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:");
                foreach (var property in product.Properties)
                {
                    prompt.AppendLine($"- {property.Name}: {property.Value}");
                }
            }

            if (!string.IsNullOrWhiteSpace(userPreferences))
            {
                prompt.AppendLine($"–î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–±–∞–∂–∞–Ω–Ω—è: {userPreferences}");
            }

            prompt.AppendLine("–°—Ç–≤–æ—Ä–∏ –æ–ø–∏—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ:");
            prompt.AppendLine("- –ü—Ä–∏–≤–∞–±–ª–∏–≤–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –µ–º–æ–¥–∑—ñ");
            prompt.AppendLine("- –û—Å–Ω–æ–≤–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑ –µ–º–æ–¥–∑—ñ");
            prompt.AppendLine("- –î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –ø–µ—Ä–µ–≤–∞–≥");
            prompt.AppendLine("- –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É");
            prompt.AppendLine("- –ü—Ä–∏–∑–∏–≤ –¥–æ –¥—ñ—ó");
            prompt.AppendLine("- –•–µ—à—Ç–µ–≥–∏");

            var request = new
            {
                prompt = prompt.ToString(),
                max_tokens = 500,
                temperature = 0.7
            };

            _httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", _aiApiKey);
            var response = await _httpClient.PostAsync(_aiEndpoint, 
                new StringContent(JsonSerializer.Serialize(request), Encoding.UTF8, "application/json"));

            if (!response.IsSuccessStatusCode)
            {
                throw new Exception($"AI API request failed with status code: {response.StatusCode}");
            }

            var responseContent = await response.Content.ReadAsStringAsync();
            var aiResponse = JsonSerializer.Deserialize<AIResponse>(responseContent);
            
            return aiResponse?.Choices?.FirstOrDefault()?.Text?.Trim() ?? 
                   throw new Exception("Failed to generate description");
        }

        public async Task<string> RefineDescriptionAsync(string currentDescription, string userFeedback)
        {
            var prompt = new StringBuilder();
            prompt.AppendLine("–ü–æ–∫—Ä–∞—â –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É –¥–ª—è Instagram –∑–≥—ñ–¥–Ω–æ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ –ø–æ–±–∞–∂–∞–Ω–Ω—è–º–∏:");
            prompt.AppendLine($"–ü–æ—Ç–æ—á–Ω–∏–π –æ–ø–∏—Å: {currentDescription}");
            prompt.AppendLine($"–ü–æ–±–∞–∂–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {userFeedback}");
            prompt.AppendLine("–ó–±–µ—Ä–µ–∂–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–ø–∏—Å—É, –∞–ª–µ –∑–º—ñ–Ω–∏ –π–æ–≥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø–æ–±–∞–∂–∞–Ω—å.");

            var request = new
            {
                prompt = prompt.ToString(),
                max_tokens = 500,
                temperature = 0.7
            };

            _httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", _aiApiKey);
            var response = await _httpClient.PostAsync(_aiEndpoint, 
                new StringContent(JsonSerializer.Serialize(request), Encoding.UTF8, "application/json"));

            if (!response.IsSuccessStatusCode)
            {
                throw new Exception($"AI API request failed with status code: {response.StatusCode}");
            }

            var responseContent = await response.Content.ReadAsStringAsync();
            var aiResponse = JsonSerializer.Deserialize<AIResponse>(responseContent);
            
            return aiResponse?.Choices?.FirstOrDefault()?.Text?.Trim() ?? 
                   throw new Exception("Failed to refine description");
        }

        private class AIResponse
        {
            public List<Choice>? Choices { get; set; }
        }

        private class Choice
        {
            public string? Text { get; set; }
        }
    }
} 